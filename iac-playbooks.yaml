version: 3
resources:
hives:
    playbook:
        Create LC Org:
            data:
                python: "########################################################\n#\n# Intended to be run as a playbook from within LC\n\nimport json\nimport urllib.parse\nimport urllib.request\nimport limacharlie\n\nlc_regions = {\n  \"us\": \"LCIO-NYC3-USAGE-V1\",\n  \"ca\": \"LCIO-TOR1-USAGE-V1\",\n  \"in\": \"LCIO-BLR1-USAGE-V1\",\n  \"uk\": \"LCIO-LON1-USAGE-V1\",\n  \"eu\": \"LCIO-AMS3-USAGE-V1\",\n  \"au\": \"LCIO-SYD1-USAGE-V1\",\n  \"exp\": \"LCIO-EXP1-USAGE-V1\"\n}\n\n# create a new org\ndef create_org(my_mgr, org_name, org_location, iac_template=None):\n  new_org = my_mgr.createNewOrg(name=org_name,location=org_location,template=iac_template)\n  new_oid = new_org[\"data\"][\"oid\"]\n  print(f\"Organization created with ID: {new_oid}\")\n  return new_oid\n  \n# create a new group\ndef create_group(my_mgr, org_name):\n  new_group = my_mgr.createGroup(name=org_name)\n  new_gid = new_group[\"data\"][\"gid\"]\n  print(f\"Group created with ID: {new_gid}\")\n  return new_gid\n\n# add owner to the new group\ndef add_owner(my_mgr, new_gid, owner):\n  print(f\"Adding owner {owner} to group {new_gid}\")\n  return my_mgr.addGroupOwner(groupId=new_gid,ownerEmail=owner)\n\n# add group to the new org\ndef add_group_org(my_mgr, new_gid, new_oid):\n  print(f\"Adding group {new_gid} to org {new_oid}\")\n  return my_mgr.addGroupOrg(groupId=new_gid,oid=new_oid)\n\n# add users to the new group\ndef add_group_members(my_mgr, new_gid, users):\n  print(f\"Adding users {users} to group {new_gid}\")\n  for each_user in users:\n    my_mgr.addGroupMember(groupId=new_gid,memberEmail=each_user)\n\n# set permissions for the new group\ndef set_group_permissions(my_mgr, new_gid, permissions):\n  print(f\"Setting permissions for group {new_gid}\")\n  return my_mgr.setGroupPermissions(groupId=new_gid,permissions=permissions)\n\n# get the group permissions from the secrets manager\ndef get_group_permissions(my_mgr, secret_name):\n  group_permissions = limacharlie.Hive(my_mgr, \"secret\").get(secret_name).data[\"secret\"]\n  return group_permissions.strip().replace('\\n','').split(',')\n\n# get the iac template from the url if it starts with https://, otherwise assume it's a payload and get it from the payloads\ndef get_iac_template(my_mgr, iac_url):\n  if iac_url.startswith(\"https://\"):\n    iac_template = urllib.request.urlopen(iac_url).read()\n    return iac_template\n  else:\n    my_payloads = limacharlie.Payloads(my_mgr)\n    iac_template = my_payloads.get(name=iac_url)\n    return iac_template.decode('utf-8')\n  \n\n# post statuses to slack\ndef post_to_slack(token, channel, message):\n  url = 'https://slack.com/api/chat.postMessage'\n  errors = []\n\n  payload = {\n    'token': token,\n    'channel': channel,\n    'text': message\n  }\n\n  data = urllib.parse.urlencode(payload).encode('utf-8')\n  req = urllib.request.Request(url, data=data, method='POST')\n  try:\n    with urllib.request.urlopen(req) as response:\n      result = json.loads(response.read().decode('utf-8'))\n  except Exception as e:\n    print(f\"An error occurred while posting to Slack channel {channel}: {e}\")\n    exit(1)\n  return result\n\n\n########################\n# this will be playbook stuff\n########################\n\ndef playbook(sdk, data):\n \n  # extract the data from the data object\n  data = data[\"data\"]\n  lc_user_secret = data[\"lc_user_secret\"]\n  users = data[\"users\"]\n  owner = data[\"requestor\"]\n  slack_secret = data[\"slack_secret\"]\n  slack_channel = data[\"slack_channel\"]\n  group_perm_secret = data[\"group_perm_secret\"]\n  iac_url = data[\"iac_url\"] or None\n  org_name = data[\"org_name\"]\n\n  #get org location from the data\n  try:\n    org_location_slack = data[\"org_location\"]\n    org_location = lc_regions[org_location_slack]\n  except:\n    post_to_slack(slack_token, slack_channel, f\":x: Invalid org location: {data['org_location']}\")\n  \n  # get the user secret and slack token from the hive\n  user_secret = limacharlie.Hive(sdk, \"secret\").get(lc_user_secret).data[\"secret\"]\n  slack_token = limacharlie.Hive(sdk, \"secret\").get(slack_secret).data[\"secret\"]\n  uid, user_key = user_secret.split(\"/\")\n\n  # instantiate our manager api object - required for org creation stuff\n  my_mgr = limacharlie.Manager(secret_api_key=user_key,uid=uid)\n  post_to_slack(slack_token, slack_channel, f\":rocket: Creating org {org_name} in {org_location}\")\n\n  # use an iac template if provided, otherwise create a new org with no template\n  if iac_url:\n    iac_template = get_iac_template(sdk, iac_url)\n  else:\n    iac_template = None\n  \n  # create the org and post to slack\n  try:\n    new_oid = create_org(my_mgr, org_name, org_location, iac_template)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Organization created with ID: {new_oid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error creating org {org_name} in {org_location}: {e}\")\n    exit(1)\n  \n  # create the group and post to slack\n  try:\n    new_gid = create_group(my_mgr, org_name)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Group created with ID: {new_gid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error creating group {org_name}: {e}\")\n    exit(1)\n  \n  # add the owner to the group and post to slack\n  try:\n    add_owner(my_mgr, new_gid, owner)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Owner {owner} added to group {new_gid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error adding owner {owner} to group {new_gid}: {e}\")\n    exit(1)\n\n  # add the group to the org and post to slack \n  try:\n    add_group_org(my_mgr, new_gid, new_oid)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Group {new_gid} added to org {new_oid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error adding group {new_gid} to org {new_oid}: {e}\")\n    exit(1)\n  \n  # set the permissions for the group and post to slack\n  try:\n    permissions = get_group_permissions(sdk, group_perm_secret)\n    set_group_permissions(my_mgr, new_gid, permissions)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Permissions set for group {new_gid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error setting permissions for group {new_gid}: {e}\")\n    exit(1)\n  \n  # post to slack that we're done\n  post_to_slack(slack_token, slack_channel, f\":partying_face: Completed creating org {org_name} in {org_location}\")\n  \n  # return the data\n  return {\n    \"data\": {\n      \"oid\": new_oid,\n      \"gid\": new_gid,\n      \"owner\": owner,\n      \"users\": users,\n      \"org_name\": org_name,\n      \"org_location\": org_location,\n      \"slack_channel\": slack_channel,\n      \"iac_url\": iac_url\n    }\n  }\n"
            usr_mtd:
                enabled: true
                expiry: 0
                tags: []
                comment: ""
        Create Slack Channel:
            data:
                python: "########################################################\n#\n# Intended to be run as a playbook from within LC\n#\n########################################################\n\nimport json\nimport urllib.parse\nimport urllib.request\nimport limacharlie\n\nlc_regions = {\n  \"us\": \"LCIO-NYC3-USAGE-V1\",\n  \"ca\": \"LCIO-TOR1-USAGE-V1\",\n  \"in\": \"LCIO-BLR1-USAGE-V1\",\n  \"uk\": \"LCIO-LON1-USAGE-V1\",\n  \"eu\": \"LCIO-AMS3-USAGE-V1\",\n  \"au\": \"LCIO-SYD1-USAGE-V1\",\n  \"exp\": \"LCIO-EXP1-USAGE-V1\"\n}\n\n# create a new org\ndef create_org(my_mgr, org_name, org_location, iac_template=None):\n  new_org = my_mgr.createNewOrg(name=org_name,location=org_location,template=iac_template)\n  new_oid = new_org[\"data\"][\"oid\"]\n  print(f\"Organization created with ID: {new_oid}\")\n  return new_oid\n  \n# create a new group\ndef create_group(my_mgr, org_name):\n  new_group = my_mgr.createGroup(name=org_name)\n  new_gid = new_group[\"data\"][\"gid\"]\n  print(f\"Group created with ID: {new_gid}\")\n  return new_gid\n\n# add owner to the new group\ndef add_owner(my_mgr, new_gid, owner):\n  print(f\"Adding owner {owner} to group {new_gid}\")\n  return my_mgr.addGroupOwner(groupId=new_gid,ownerEmail=owner)\n\n# add group to the new org\ndef add_group_org(my_mgr, new_gid, new_oid):\n  print(f\"Adding group {new_gid} to org {new_oid}\")\n  return my_mgr.addGroupOrg(groupId=new_gid,oid=new_oid)\n\n# add users to the new group\ndef add_group_members(my_mgr, new_gid, users):\n  print(f\"Adding users {users} to group {new_gid}\")\n  for each_user in users:\n    my_mgr.addGroupMember(groupId=new_gid,memberEmail=each_user)\n\n# set permissions for the new group\ndef set_group_permissions(my_mgr, new_gid, permissions):\n  print(f\"Setting permissions for group {new_gid}\")\n  return my_mgr.setGroupPermissions(groupId=new_gid,permissions=permissions)\n\n# get the group permissions from the secrets manager\ndef get_group_permissions(my_mgr, secret_name):\n  group_permissions = limacharlie.Hive(my_mgr, \"secret\").get(secret_name).data[\"secret\"]\n  return group_permissions.strip().replace('\\n','').split(',')\n\n# get the iac template from the url if it starts with https://, otherwise assume it's a payload and get it from the payloads\ndef get_iac_template(my_mgr, iac_url):\n  if iac_url.startswith(\"https://\"):\n    iac_template = urllib.request.urlopen(iac_url).read()\n    return iac_template\n  else:\n    my_payloads = limacharlie.Payloads(my_mgr)\n    iac_template = my_payloads.get(name=iac_url)\n    return iac_template.decode('utf-8')\n  \n\n# post statuses to slack\ndef post_to_slack(token, channel, message):\n  url = 'https://slack.com/api/chat.postMessage'\n  errors = []\n\n  payload = {\n    'token': token,\n    'channel': channel,\n    'text': message\n  }\n\n  data = urllib.parse.urlencode(payload).encode('utf-8')\n  req = urllib.request.Request(url, data=data, method='POST')\n  try:\n    with urllib.request.urlopen(req) as response:\n      result = json.loads(response.read().decode('utf-8'))\n  except Exception as e:\n    print(f\"An error occurred while posting to Slack channel {channel}: {e}\")\n    exit(1)\n  return result\n\n\n########################\n# this will be playbook stuff\n########################\n\ndef playbook(sdk, data):\n \n  # extract the data from the data object\n  data = data[\"data\"]\n  lc_user_secret = data[\"lc_user_secret\"]\n  users = data[\"users\"]\n  owner = data[\"requestor\"]\n  slack_secret = data[\"slack_secret\"]\n  slack_channel = data[\"slack_channel\"]\n  group_perm_secret = data[\"group_perm_secret\"]\n  iac_url = data[\"iac_url\"] or None\n  org_name = data[\"org_name\"]\n\n  #get org location from the data\n  try:\n    org_location_slack = data[\"org_location\"]\n    org_location = lc_regions[org_location_slack]\n  except:\n    post_to_slack(slack_token, slack_channel, f\":x: Invalid org location: {data['org_location']}\")\n  \n  # get the user secret and slack token from the hive\n  user_secret = limacharlie.Hive(sdk, \"secret\").get(lc_user_secret).data[\"secret\"]\n  slack_token = limacharlie.Hive(sdk, \"secret\").get(slack_secret).data[\"secret\"]\n  uid, user_key = user_secret.split(\"/\")\n\n  # instantiate our manager api object - required for org creation stuff\n  my_mgr = limacharlie.Manager(secret_api_key=user_key,uid=uid)\n  post_to_slack(slack_token, slack_channel, f\":rocket: Creating org {org_name} in {org_location}\")\n\n  # use an iac template if provided, otherwise create a new org with no template\n  if iac_url:\n    iac_template = get_iac_template(sdk, iac_url)\n  else:\n    iac_template = None\n  \n  # create the org and post to slack\n  try:\n    new_oid = create_org(my_mgr, org_name, org_location, iac_template)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Organization created with ID: {new_oid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error creating org {org_name} in {org_location}: {e}\")\n    exit(1)\n  \n  # create the group and post to slack\n  try:\n    new_gid = create_group(my_mgr, org_name)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Group created with ID: {new_gid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error creating group {org_name}: {e}\")\n    exit(1)\n  \n  # add the owner to the group and post to slack\n  try:\n    add_owner(my_mgr, new_gid, owner)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Owner {owner} added to group {new_gid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error adding owner {owner} to group {new_gid}: {e}\")\n    exit(1)\n\n  # add the group to the org and post to slack \n  try:\n    add_group_org(my_mgr, new_gid, new_oid)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Group {new_gid} added to org {new_oid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error adding group {new_gid} to org {new_oid}: {e}\")\n    exit(1)\n  \n  # set the permissions for the group and post to slack\n  try:\n    permissions = get_group_permissions(sdk, group_perm_secret)\n    set_group_permissions(my_mgr, new_gid, permissions)\n    post_to_slack(slack_token, slack_channel, f\":white_check_mark: Permissions set for group {new_gid}\")\n  except Exception as e:\n    post_to_slack(slack_token, slack_channel, f\":x: Error setting permissions for group {new_gid}: {e}\")\n    exit(1)\n  \n  # post to slack that we're done\n  post_to_slack(slack_token, slack_channel, f\":partying_face: Completed creating org {org_name} in {org_location}\")\n  \n  # return the data\n  return {\n    \"data\": {\n      \"oid\": new_oid,\n      \"gid\": new_gid,\n      \"owner\": owner,\n      \"users\": users,\n      \"org_name\": org_name,\n      \"org_location\": org_location,\n      \"slack_channel\": slack_channel,\n      \"iac_url\": iac_url\n    }\n  }\n"
            usr_mtd:
                enabled: true
                expiry: 0
                tags: []
                comment: ""